{"version":3,"sources":["routes/Home.js","routes/Registry.js","App.js","serviceWorker.js","index.js"],"names":["Home","to","Registry","useState","registryData","setRegistryData","textInput","setTextInput","error","setError","useEffect","length","console","log","onSubmit","e","preventDefault","tempData","push","type","value","onChange","target","style","color","map","item","index","key","onClick","splice","removeItem","editItem","App","className","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"2PAYeA,MATf,WACI,OACI,6BACI,sCACA,kBAAC,IAAD,CAAMC,GAAG,aAAT,oC,sBCuDGC,MA1Df,WAAqB,IAAD,EACwBC,mBAAS,IADjC,mBACTC,EADS,KACKC,EADL,OAEkBF,mBAAS,IAF3B,mBAETG,EAFS,KAEEC,EAFF,OAGUJ,oBAAS,GAHnB,mBAGTK,EAHS,KAGFC,EAHE,KAoChB,OAPAC,qBAAU,WACFJ,EAAUK,OAAS,GAAIF,GAAS,GAC/BA,GAAS,KACf,CAACH,IAEJM,QAAQC,IAAIT,GAGR,6BACI,+CACA,kBAAC,IAAD,CAAMH,GAAG,KAAT,0BACA,0BAAMa,SAnCE,SAACC,GAEb,GADAA,EAAEC,kBACER,EAAJ,CAEA,IAAMS,EAAQ,YAAOb,GACrBa,EAASC,KAAKZ,GACdD,EAAgBY,GAChBV,EAAa,OA6BL,8CACI,2BAAOY,KAAK,OAAOC,MAAOd,EAAWe,SAAU,SAACN,GAAD,OAAOR,EAAaQ,EAAEO,OAAOF,WAEhF,2BAAOD,KAAK,SAASC,MAAM,YAE9BZ,EAAQ,0BAAMe,MAAO,CAACC,MAAO,QAArB,mBAAsD,KAE3DpB,EAAaqB,KAAI,SAACC,EAAOC,GACrB,OACI,wBAAIC,IAAKD,GAAT,IAAkBD,EAAlB,IAAwB,4BAAQG,QAAS,kBAnC1C,SAACF,GAChB,IAAIV,EAAQ,YAAOb,GACnBa,EAASa,OAAOH,EAAO,GACvBtB,EAAgBY,GAgC+Cc,CAAWJ,KAAlC,YAAxB,IAAoF,4BAAQE,QAAS,kBA7BxG,SAACF,GACd,IAAInB,EAAJ,CAEA,IAAIS,EAAQ,YAAOb,GACnBa,EAASU,GAASrB,EAClBD,EAAgBY,IAwB2Ge,CAASL,KAAhC,YAApF,U,MC7BTM,MAnBf,WACE,OACE,yBAAKC,UAAU,OAAf,eAEE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,GACnB,kBAAC,EAAD,OAGF,kBAAC,IAAD,CAAOD,KAAK,aACV,kBAAC,EAAD,WCLQE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA7C,GACLI,QAAQJ,MAAMA,EAAM8C,c","file":"static/js/main.66932d3e.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction Home() {\n    return (\n        <div>\n            <h1> Home </h1>\n            <Link to='/registry'> Click here to go to Registry </Link>\n        </div>\n    )\n}\n\nexport default Home;","import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport './Registry.css';\n\nfunction Registry() {\n    const [registryData, setRegistryData] = useState([])\n    const [textInput, setTextInput] = useState(\"\")\n    const [error, setError] = useState(false)\n\n    const addItem = (e) => {\n        e.preventDefault();\n        if (error) return ;\n\n        const tempData = [...registryData];\n        tempData.push(textInput)\n        setRegistryData(tempData)\n        setTextInput(\"\")\n    }\n\n    const removeItem = (index) => {\n        let tempData = [...registryData];\n        tempData.splice(index, 1)\n        setRegistryData(tempData)\n    }\n\n    const editItem = (index) => {\n        if (error) return ;\n\n        let tempData = [...registryData];\n        tempData[index] = textInput;\n        setRegistryData(tempData)\n    }\n\n    useEffect(() => {\n        if (textInput.length > 10) setError(true);\n        else setError(false);\n    }, [textInput])\n\n    console.log(registryData)\n\n    return (\n        <div>\n            <h1> Registry Page </h1>\n            <Link to='/'> Go back to Home page </Link>\n            <form onSubmit={addItem}>\n                <label> Text input:\n                    <input type=\"text\" value={textInput} onChange={(e) => setTextInput(e.target.value)}/>\n                </label>\n                <input type='submit' value='Submit' />\n            </form>\n            {error ? <span style={{color: \"red\"}}> Error Occured </span> : null}\n            {\n                registryData.map((item , index) => {\n                    return (\n                        <li key={index}> {item} <button onClick={() => removeItem(index)}> Remove </button> <button onClick={() => editItem(index)}> Update </button> </li>\n                    )\n                })\n            }\n        </div>\n    )\n}\n\nexport default Registry;","import React from 'react';\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport Home from \"./routes/Home\";\nimport Registry from \"./routes/Registry\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      Registry App\n      <BrowserRouter>\n        <Switch>\n          <Route path='/' exact>\n            <Home />\n          </Route>\n\n          <Route path='/registry'>\n            <Registry />\n          </Route>\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}